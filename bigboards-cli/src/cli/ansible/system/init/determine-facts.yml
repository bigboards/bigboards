- name: load the facts (armv7l)
  when: ansible_machine == 'armv7l'
  set_fact:
    node_nic_internal: eth0
    node_nic_external: eth1
    hex_arch: armv7l

- name: load the facts (x86_64)
  when: ansible_machine == 'x86_64'
  set_fact:
    node_nic_internal: eth0
    node_nic_external: eth1
    hex_arch: x86_64

- name: check if there is a br1 interface
  shell: "[ $(ifconfig br1 2> /dev/null |wc -l) -gt 0 ] && echo 'yes' || echo 'no'"
  register: has_bridge

- name: set the nic to use as a reference (armv7l && bridge)
  when: ansible_machine == 'armv7l' and 'yes' in has_bridge.stdout
  set_fact:
    nic_ref: br1

- name: set the nic to use as a reference (armv7l && no bridge)
  when: ansible_machine == 'armv7l' and 'no' in has_bridge.stdout
  set_fact:
    nic_ref: eth0

- name: set the nic to use as a reference
  when: ansible_machine == 'x86_64'
  set_fact:
    nic_ref: eth0

- name: determine the hex ip range
  shell: echo `ifconfig {{ nic_ref }} 2>/dev/null|awk '/inet addr:/ {print $2}'|sed 's/addr://'` | rev | cut -c 3- | rev
  register: hex_ip_range

- name: determine the hex ip netmask
  shell: echo $(ifconfig {{ nic_ref }} |grep Mask | tr -s ' ' | cut -d ':' -f4)
  register: hex_ip_mask

- name: determine the hex node sequence
  shell: echo `ifconfig {{ nic_ref }} 2>/dev/null|awk '/inet addr:/ {print $2}'|sed 's/addr://'` | rev | cut -d '.' -f 1
  register: node_sequence

- name: determine the hex name and id
  set_fact:
    hex_name_id: { stdout: "{{ ansible_hostname | regex_replace('(.*)(-n[1-9]+$)', '\\1') }}" }

- debug:
    var: nic_ref

- debug:
    var: hex_ip_range

- debug:
    var: node_sequence

- debug:
    var: hex_name_id

- assert:
    that:
      - "nic_ref is defined"
      - "hex_ip_range.stdout|length > 0"
      - "node_sequence.stdout|length > 0"
      - "hex_name_id.stdout|length > 0"