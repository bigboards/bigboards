- name: copy the kernel debs to the remote system
  copy:
    src: 'files/kernel/{{ item }}'
    dest: '/tmp/{{ item }}'
    mode: 777
  with_items:
    - 'linux-firmware-image-3.19.0-armv7-x4_1cross_armhf.deb'
    - 'linux-headers-3.19.0-armv7-x4_1cross_armhf.deb'
    - 'linux-image-3.19.0-armv7-x4_1cross_armhf.deb'
    - 'linux-libc-dev_1cross_armhf.deb'

- name: make sure the new kernel is installed
  shell: dpkg -i {{ item }}
  with_items:
    - '/tmp/linux-firmware-image-3.19.0-armv7-x4_1cross_armhf.deb'
    - '/tmp/linux-headers-3.19.0-armv7-x4_1cross_armhf.deb'
    - '/tmp/linux-image-3.19.0-armv7-x4_1cross_armhf.deb'
    - '/tmp/linux-libc-dev_1cross_armhf.deb'

- name: get the system version
  shell: if [ "$(cat /sys/bus/sdio/devices/mmc1\:0001\:1/device)" = "0x4329" ]; then echo "B1"; elif [ "$(cat /sys/bus/sdio/devices/mmc1\:0001\:1/device)" = "0x4330"  ]; then echo "C1"; else echo "unknown"; fi
  register: system_version
  sudo: 'no'

- name: make sure the correct uEnv file is loaded
  copy:
    src: 'files/kernel/uEnv-{{system_version.stdout}}.txt'
    dest: '/boot/uEnv.txt'

- name: make sure the correct kernel is being loaded
  file:
    src: '/boot/vmlinuz-3.19.0-armv7-x4'
    dest: '/boot/zImage'
    state: 'link'

- name: load the modules we needed
  lineinfile:
    dest: '/etc/modules'
    line: '{{ item }}'
    regexp: '^{{ item }}$'
    state: 'present'
  with_items:
    - usbnet
    - g_ether