<VirtualHost *:443>
    ServerAdmin webmaster@localhost

    LogLevel info ssl:warn

    ErrorLog ${APACHE_LOG_DIR}/error.log
    CustomLog ${APACHE_LOG_DIR}/access.log combined

    # Enable SSL and use certificates
    SSLEngine on
    SSLCertificateFile      /etc/ssl/certs/ssl-cert-snakeoil.pem
    SSLCertificateKeyFile /etc/ssl/private/ssl-cert-snakeoil.key

    # Legacy browser support
    BrowserMatch "MSIE [2-6]" nokeepalive ssl-unclean-shutdown downgrade-1.0 force-response-1.0
    BrowserMatch "MSIE [17-9]" ssl-unclean-shutdown

    # Enable external + pwauth
    AddExternalAuth pwauth /usr/sbin/pwauth
    SetExternalAuthMethod pwauth pipe

    # All traffice requires basic authentication via pwauth
    <Proxy *>
      AuthType Basic
      AuthName "Restricted"
      AuthBasicProvider external
      AuthExternal pwauth

      Require valid-user

      Order allow,deny
      Allow from all
    </Proxy>

    # Enable the rewrite engine
    # In the rules/conds, [NC] means case-insensitve, [P] means proxy
    RewriteEngine on

    # socket.io 1.0+ starts all connections with an HTTP polling request
    # and look-ahead for user authentication
    RewriteCond %{QUERY_STRING}     transport=polling        [NC]
    RewriteCond %{LA-U:REMOTE_USER} !^$
    RewriteRule /(.*)               http://localhost:7000/$1 [P]

    # When socket.io wants to initiate a WebSocket connection, it sends an
    # "upgrade: websocket" request that should be transferred to ws://
    # and look-ahead for user authentication
    RewriteCond %{HTTP:Upgrade} websocket               [NC]
    RewriteCond %{LA-U:REMOTE_USER} !^$
    RewriteRule /(.*)           ws://localhost:7000/$1  [P]

    #ProxyPreserveHost On
    ProxyRequests    Off
    ProxyPass        /          http://localhost:7000/
    ProxyPassReverse /          http://localhost:7000/
</VirtualHost>
