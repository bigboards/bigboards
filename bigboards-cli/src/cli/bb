#!/bin/bash
# -- ----------------------------------------------------------------------- --
# -- bb : BigBoards management script
# -- ----------------------------------------------------------------------- --
ACTION=${1}
DIR=$(dirname "$(readlink -f ${BASH_SOURCE[0]})" )

if [[ $EUID -eq 0 ]];
then
   echo "The BB command may not be run as root"
   exit 1
fi

# Check if the hosts file exists inside the /opt/bb directory
HOSTSFILE=/opt/bb/hosts
[ ! -f "$HOSTSFILE" ] && HOSTSFILE=/etc/ansible/hosts
PLAYBOOK="ansible-playbook -i ${HOSTSFILE}"

verifyPrerequisites() {
    if [ ! -e "/usr/bin/ansible" ]; then
        echo "Warn: Ansible: not installed"
    fi

    if [ ! -e "/etc/ansible/hosts" ]; then
        echo "Warn: Ansible Hosts File: not installed"
    fi

    VALID_ANSIBLE_HOSTS=$(grep "\[host-coordinators\]" /etc/ansible/hosts | wc -l)
    if [ "$VALID_ANSIBLE_HOSTS" == "0" ]; then
        echo "Warn: Ansible Hosts File: invalid"
    fi
}

generateHostsFile() {
        HEX_NAME_ID=$(hostname |cut -d '-' -f 1)

        echo
        echo "No ansible hosts file has been found. Generating one for ${HEX_NAME_ID}."
        echo

cat << EOF | sudo tee /etc/ansible/hosts
[local]
localhost   connection=local

[host:children]
host-coordinators
host-workers

[host-coordinators]
${HEX_NAME_ID}-n1   ansible_ssh_user=bb

[host-workers]
${HEX_NAME_ID}-n2   ansible_ssh_user=bb
${HEX_NAME_ID}-n3   ansible_ssh_user=bb
${HEX_NAME_ID}-n4   ansible_ssh_user=bb
${HEX_NAME_ID}-n5   ansible_ssh_user=bb
${HEX_NAME_ID}-n6   ansible_ssh_user=bb

EOF
}

function init() {
    sudo apt-get install -y software-properties-common
    sudo apt-add-repository -y ppa:ansible/ansible
    sudo apt-get update
    sudo apt-get install -y ansible
}

requestPowerCycle() {
    echo
    echo
    echo "################################################################################"
    echo "##                                                                            ##"
    echo "##                            I M P O R T A N T                               ##"
    echo "##                                                                            ##"
    echo "##   You must powercycle the hex in order for the changes to be picked up!    ##"
    echo "##                                                                            ##"
    echo "################################################################################"
    echo
    echo
}

validateTintBuilder() {
    [ ! -e "${HOME}/.tint-builder" ] && echo "No .tint-builder file found in the home directory of ${USER} " && exit 8;
    source "${HOME}/.tint-builder"

    [ -z "${BB_USERNAME}" ] && echo "BB_USERNAME not set" && exit 7;
    [ -z "${BB_EMAIL}" ] && echo "BB_EMAIL not set" && exit 7;
    [ -z "${BB_PASSWORD}" ] && echo "BB_PASSWORD not set" && exit 7;
}

verifyPrerequisites

MOD_PATH="$DIR/ansible"
MOD_FOUND="no"
for OPT in $@; do
    if [ "$OPT" = "help" ]; then
        MOD_FOUND="yes"
        if [ -e "$MOD_PATH/module" ]; then
            source "$MOD_PATH/module"
            moduleInfo
        fi
    else
        # -- check if the directory has a module or if it is a container for other operations
        if [ -e "$MOD_PATH/$OPT/command" ]; then
            MOD_FOUND="yes"
            source "$MOD_PATH/$OPT/command"
            moduleExecute $@

            RET=$?
            if [[ $RET != 0 ]]; then
                moduleInfo
                exit $RET
            fi
        else
            MOD_PATH="$MOD_PATH/$OPT"
        fi
    fi
done

if [ "$MOD_FOUND" = "no" ]; then
    echo "Error:  No module could be found for $@"
    echo
    echo "Available Modules:"

    modules=$(ls ${DIR}/ansible)
    for module in $modules; do
        echo "  - $module"
    done

    echo
    echo "run '$0 <module> help' to get more information about a specific module and its commands"
    echo
fi

#case "${ACTION}" in
#    mmc)
#        sudo service bigboards-mmc $2
#        ;;
