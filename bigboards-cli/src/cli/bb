#!/bin/bash
# -- ----------------------------------------------------------------------- --
# -- bb : BigBoards management script
# -- ----------------------------------------------------------------------- --
ACTION=${1}
OPERATION=${2}
DIR=$(dirname "$(readlink -f ${BASH_SOURCE[0]})" )

if [[ $EUID -eq 0 ]];
then
   echo "The BB command may not be run as root"
   exit 1
fi

# Check if the hosts file exists inside the /opt/bb directory
HOSTSFILE=/opt/bb/hosts
[ ! -f "$HOSTSFILE" ] && HOSTSFILE=/etc/ansible/hosts
PLAYBOOK="ansible-playbook -i ${HOSTSFILE}"

askForInit() {
    echo
    echo
    echo "################################################################################"
    echo "##                                                                            ##"
    echo "##                            I M P O R T A N T                               ##"
    echo "##                                                                            ##"
    echo "##     The cluster has not been initialized yet. You can do so by running     ##"
    echo "##                                                                            ##"
    echo "##                             bb system init                                 ##"
    echo "##                                                                            ##"
    echo "################################################################################"
    echo
    echo
}


usage() {
    echo "Usage: $0 [hardware|firmware|network|run|mmc|container|system|help]" 1>&2; exit 1;
}

verifyPrerequisites() {
    if [ "$ACTION" = "system" ] && [ "$OPERATION" = "init" ]; then
        return
    fi

    if [ ! -e "/usr/bin/ansible" ] || [ ! -e "/etc/ansible/hosts" ]; then
        askForInit
        exit 1
    else
        VALID_ANSIBLE_HOSTS=$(grep "\[host-coordinators\]" /etc/ansible/hosts | wc -l)
        if [ "$VALID_ANSIBLE_HOSTS" == "0" ]; then
            askForInit
            exit 1
        fi
    fi
}

requestPowerCycle() {
    echo
    echo
    echo "################################################################################"
    echo "##                                                                            ##"
    echo "##                            I M P O R T A N T                               ##"
    echo "##                                                                            ##"
    echo "##   You must powercycle the hex in order for the changes to be picked up!    ##"
    echo "##                                                                            ##"
    echo "################################################################################"
    echo
    echo
}

validateTintBuilder() {
    [ ! -e "${HOME}/.tint-builder" ] && echo "No .tint-builder file found in the home directory of ${USER} " && exit 8;
    source "${HOME}/.tint-builder"

    [ -z "${BB_USERNAME}" ] && echo "BB_USERNAME not set" && exit 7;
    [ -z "${BB_EMAIL}" ] && echo "BB_EMAIL not set" && exit 7;
    [ -z "${BB_PASSWORD}" ] && echo "BB_PASSWORD not set" && exit 7;
}

update() {
    sudo apt-get update
    sudo apt-get install -y --force-yes bigboards-updater bigboards-cli bigboards-mmc

    ${PLAYBOOK} /opt/bb/runtimes/bigboards-updater/patches/install.yml
    [ "$?" -ne "0" ] && echo "Something went wrong when invoking patch ${p}. Have a look at the output above to figure out what went wrong." && exit -1;

    sudo service bigboards-mmc restart
}

verifyPrerequisites

case "${ACTION}" in
    hardware)
        case "${2}" in
            reset)
                ${DIR}/scripts/bb-hardware-reset.sh ;;
            help|*)
                cat ${DIR}/help/hardware.help ;;
        esac
        ;;
    firmware)
        case "${2}" in
            upgrade)
                [ -z "${3}" ] && echo "No target version provided! Please specify this as 3rd parameter ..." && usage

                COMPONENT="$4"
                [ -z "${4}" ] && COMPONENT="main"

                ${PLAYBOOK} --extra-vars "version=${3} component=${COMPONENT}" ${DIR}/ansible/firmware/upgrade/main.yml
                ;;
            update)
                update
                ;;
            harden)
                ${PLAYBOOK} ${DIR}/ansible/firmware/harden/main.yml
                ;;
            factory-reset)
                ${PLAYBOOK} ${DIR}/ansible/hardware/reset/main.yml
                ;;
            help|*)
                cat "${DIR}/help/firmware.help"
                ;;
        esac
        ;;
    network)
        case "${2}" in
            switch)
                rx='([1-9]?[0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])'

                if [[ -z $3 || -z $4 || -z $5 ]]; then
                    echo "No range, prefix and interface have been provide"
                    exit 1
                fi

                if [[ ! $3 =~ ^$rx\.$rx\.$rx$ ]]; then
                    echo "Invalid network range!"
                    echo "  expected format: <1-255>.<0-255>.<0-255>"
                    exit 1
                fi

                if [[ ! $4 =~ ^$rx\.$rx\.$rx\.$rx$ ]]; then
                    echo "Invalid network mask!"
                    echo "  expected format: <1-255>.<0-255>.<0-255>.<0-255>"
                    exit 1
                fi

                if [[ ! -e /sys/class/net/$5 ]]; then
                    echo "Invalid network interface!"
                    echo "  valid network interfaces: $(ls /sys/class/net)"
                    exit 1
                fi

                ${PLAYBOOK} ${DIR}/ansible/network/switch/switch_network.yml --extra-vars "network_range=${3} network_mask=${4} itf=${5}"

                [ $? -eq 0 ] && requestPowerCycle
                ;;
            proxy)
                echo -n "Please enter the address of your HTTP proxy server [eg. my-proxy.my-domain.com]: "
                read HTTP_PROXY_HOST

                echo -n "Please enter the port of your HTTP proxy server [eg. 8080]: "
                read HTTP_PROXY_PORT

                echo -n "Please enter the address of your HTTPS proxy server [eg. my-proxy.my-domain.com]: "
                read HTTPS_PROXY_HOST

                echo -n "Please enter the port of your HTTPS proxy server [eg. 8080]: "
                read HTTPS_PROXY_PORT

                ${PLAYBOOK} ${DIR}/ansible/network/proxy/set_proxy.yml --extra-vars "http_proxy_host=${HTTP_PROXY_HOST} http_proxy_port=${HTTP_PROXY_PORT} https_proxy_host=${HTTPS_PROXY_HOST} https_proxy_port=${HTTPS_PROXY_PORT}"

                [ $? -eq 0 ] && requestPowerCycle
                ;;
            no-proxy)
                ${PLAYBOOK} ${DIR}/ansible/network/proxy/unset_proxy.yml

                [ $? -eq 0 ] && requestPowerCycle
                ;;
            help|*)
                cat "${DIR}/help/network.help"
                ;;
        esac
        ;;
    run)
        case "${2}" in
            help)
                cat "${DIR}/help/run.help"
                ;;
            *)
                ansible host --sudo -m shell -a "$2"
                ;;
        esac
        ;;
    mmc)
        case "${2}" in
            help)
                cat "${DIR}/help/mmc.help"
                ;;
            *)
                sudo service bigboards-mmc $2
                ;;
        esac
        ;;
    container)
        case "${2}" in
            list)
                sudo docker ps
                ;;
            attach)
                sudo docker exec -it $3 /bin/bash
                ;;
            tail)
                sudo docker logs --tail=100 -f $3
                ;;
            build)
                validateTintBuilder

                ARCH=$(uname -m)
                GIT_URL=$3
                SLUG=$4

                echo "Logging into the docker hub"
                sudo docker login -e ${BB_EMAIL} -u ${BB_USERNAME} -p ${BB_PASSWORD}

                [ ! -e ~/build ] && mkdir ~/build
                pushd ~/build
                if [ -e "${SLUG}" ];
                then
                    pushd ${SLUG}
                    git pull
                    popd
                else
                    git clone ${GIT_URL} ${SLUG}
                fi

                for D in `find ${SLUG}/docker -mindepth 1 -type d`
                do
                    sed -i -- "s/__arch__/${ARCH}/g" ${D}/Dockerfile

                    CONTAINER_NAME="$(basename $D)"
                    IMAGE_NAME="${BB_USERNAME}/${CONTAINER_NAME}-${ARCH}:latest"

                    echo "Building ${IMAGE_NAME}"
                    sudo -E docker build -t ${IMAGE_NAME} ${D}

                    echo "Pushing ${IMAGE_NAME}"
                    sudo -E docker push ${IMAGE_NAME}
                done

                popd
                ;;
            help|*)
                cat "${DIR}/help/container.help"
                ;;
            *)
        esac
        ;;
    system)
        case "${2}" in
            init)
                ${DIR}/scripts/bb-cluster-init.sh
                ;;
            bootstrap)
                ${PLAYBOOK} ${DIR}/ansible/system/bootstrap/bootstrap.yml

                [ $? -eq 0 ] && requestPowerCycle
                ;;
            purge)
                ${PLAYBOOK} ${DIR}/ansible/system/purge/purge.yml
                ;;
            purge-legacy)
                ${PLAYBOOK} ${DIR}/ansible/system/purge/purge-legacy.yml
                ;;
            version)
                WIRELESS_CHIP=$(cat /sys/bus/sdio/devices/mmc1\:0001\:1/device)
                if [ "$WIRELESS_CHIP" == "0x4329" ]; then
                    echo "B1"
                elif [ "$WIRELESS_CHIP" == "0x4330"  ]; then
                    echo "C1"
                else
                    echo "unknown"
                fi
                ;;
            help|*)
                cat "${DIR}/help/system.help"
                ;;
        esac
        ;;
    help|*)
        cat "${DIR}/help/help.help"
        ;;
esac
