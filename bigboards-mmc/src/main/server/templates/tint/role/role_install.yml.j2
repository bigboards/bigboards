[% include generator.pre_install ignore missing %]

- name: make sure the [[ role.name ]] role data directory exists
  file:
    state: "directory"
    path: "[[ dirs.role_data ]]"
    owner: 1000
    mode: 0777

###############################################################################
##
## Volumes
##
###############################################################################
[% for volume in role.volumes %]
[%- if isRelativePath(volume.host) %]
[%- if isDirectory(generator.git + '/config/' + volume.host) %]
- name: make sure the [[ role.name ]] configuration directory exists
  file: state="directory" path="[[ dirs.config ]]/[[ volume.host ]]" owner="1000"

- name: Set source folder
  set_fact:
    config_source_path: "[[ generator.ansible ]]/roles/[[ role.name ]]/templates/[[volume.host]]"

- name: list the [[ role.name ]] configuration folders to make available
  local_action:
    module: "find"
    path: "{{ config_source_path }}"
    file_type: "directory"
    recurse: "yes"
    hidden: "true"
  register: "config_folders"

- name: reduce the [[ role.name ]] configuration folders to relative paths
  set_fact:
    config_folder_paths: "{{ config_folders.files | map(attribute='path') | list | replace(config_source_path, '') }}"

- name: list the [[ role.name ]] configuration files to make available
  local_action:
    module: "find"
    path: "{{ config_source_path }}"
    file_type: "file"
    recurse: "yes"
    hidden: "true"
  register: "config_files"

- name: reduce the [[ role.name ]] configuration files to relative paths
  set_fact:
    config_file_paths: "{{ config_files.files | map(attribute='path') | list | replace(config_source_path + '/', '') }}"

- name: make sure the [[ role.name ]] configuration folders are available
  file:
    dest: "[[ dirs.config ]]/[[ volume.host ]]/{{item}}"
    state: "directory"
  with_items: "{{ config_folder_paths }}"

- name: make sure the [[ role.name ]] configuration files are available
  template:
    src: "{{ config_source_path }}/{{ item }}"
    dest: "[[ dirs.config ]]/[[ volume.host ]]/{{ item }}"
  with_items: "{{ config_file_paths }}"

[% else %]
- name: make sure the [[ role.name ]] configuration directory exists
  file: state="directory" path="[[ parentFileName(dirs.config + '/' + volume.host) ]]" owner="1000"

- name: make sure the [[ volume.container ]] volume exists
  template:
    src: "../templates/[[ volume.host ]]"
    dest: "[[ dirs.config ]]/[[ volume.host ]]"

[% endif -%]
[% endif -%]
[% endfor %]

###############################################################################
##
## Docker
##
###############################################################################

[% if not isFalsy(role.registry) %]
- name: login to the docker registry
  sudo: yes
  shell: docker login -e [[ role.registry.email ]] -u [[ role.registry.user ]] -p [[ role.registry.password ]] [[ role.registry.name ]]
[% endif %]

- name: make sure the [[ role.image ]] docker image is the latest one
  sudo: yes
[%- if not isFalsy(role.registry) %]
  shell: docker pull [[ role.registry.name ]]/[[ role.image ]]
[%- else %]
  shell: docker pull [[ docker.registry ]]/[[ role.image ]]
[%- endif %]

- name: make sure the [[ role.name ]] docker container exists
  sudo: yes
  docker:
    docker_api_version: "1.19"
    name: "[[ role.name ]]"
[% if not isFalsy(role.networking) %]
    net: "[[ role.networking ]]"
[% endif %]
[% if not isFalsy(role.ports) %]
    expose:
[% for port in role.ports %]
      - "[[ port.container ]]"
[% endfor %]
    ports:
[% for port in role.ports %]
[% if isFalsy(port.bind) %]
      - "[[ port.host ]]:[[ port.container ]]"
[%- else %]
      - "[[ port.bind ]]:[[ port.host ]]:[[ port.container ]]"
[% endif %]
[% endfor %]
[% endif %]
[% if isFalsy(role.ports) %]
    publish_all_ports: "yes"
[% endif %]
[% if not isFalsy(role.volumes_from) %]
    volumes_from:[% for v in role.volumes_from %]
      - "[[ v ]]"[% endfor %]
[% endif %]
    volumes:
      - "[[ dirs.role_data ]]:/data"
      - "[[ dirs.role_scripts ]]:/scripts"
[%- for volume in role.volumes %]
[%- if isFalsy(volume.host) %]
      - "[[ volume.container ]]"
[%- elseif isRelativePath(volume.host) %]
      - "[[ dirs.config ]]/[[ volume.host ]]:[[ volume.container ]]"
[%- else %]
      - "[[ volume.host ]]:[[ volume.container ]]"
[%- endif %]
[%- endfor %]
[% if not isFalsy(role.registry) %]
    image: "[[ role.registry.name ]]/[[ role.image ]]"
[% else %]
    image: "[[ docker.registry ]]/[[ role.image ]]"
[% endif %]
[% if not isFalsy(role.links) %]
    links:[% for link in role.links %]
      - "[[ link ]]"[% endfor %]
[% endif %]
[% if not (isFalsy(role.command) || role.command == "null") %]
    command: "[[ role.command ]]"
[% elseif not isFalsy(role.scripts.run) %]
    command: "/scripts/run.sh"
[% endif %]
[% if not isFalsy(role.privileged) %]
    privileged: yes
[% endif %]
    state: running[% if not isFalsy(role.environment) %]
    env:[% for envVar in role.environment %]
      [% if isFalsy(envVar.value) %] [[ envVar.key ]] [% else %] [[ envVar.key ]]: "[[ envVar.value ]]"[% endif %][% endfor %][% endif %]

- name: make sure the [[ role.name ]] init file is available
  copy: src=init/[[ role.name ]].conf dest=/etc/init/[[ role.name ]].conf
  sudo: yes

- name: make sure the [[ role.name ]] service is started at boot
  service: name=[[ role.name ]] enabled=yes state=started
  sudo: yes

[% include generator.post_install ignore missing %]